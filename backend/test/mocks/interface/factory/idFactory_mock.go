// Code generated by MockGen. DO NOT EDIT.
// Source: /home/nakamuraitsuki/program/Maximum/Infra/Maximum-Infra-hands-on/backend/internal/interface/factory/idFactory.go
//
// Generated by this command:
//
//	mockgen -source=/home/nakamuraitsuki/program/Maximum/Infra/Maximum-Infra-hands-on/backend/internal/interface/factory/idFactory.go -destination=test/mocks/interface/factory/idFactory_mock.go
//

// Package mock_factory is a generated GoMock package.
package mock_factory

import (
	reflect "reflect"

	entity "example.com/infrahandson/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUserIDFactory is a mock of UserIDFactory interface.
type MockUserIDFactory struct {
	ctrl     *gomock.Controller
	recorder *MockUserIDFactoryMockRecorder
	isgomock struct{}
}

// MockUserIDFactoryMockRecorder is the mock recorder for MockUserIDFactory.
type MockUserIDFactoryMockRecorder struct {
	mock *MockUserIDFactory
}

// NewMockUserIDFactory creates a new mock instance.
func NewMockUserIDFactory(ctrl *gomock.Controller) *MockUserIDFactory {
	mock := &MockUserIDFactory{ctrl: ctrl}
	mock.recorder = &MockUserIDFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserIDFactory) EXPECT() *MockUserIDFactoryMockRecorder {
	return m.recorder
}

// NewUserID mocks base method.
func (m *MockUserIDFactory) NewUserID() (entity.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUserID")
	ret0, _ := ret[0].(entity.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewUserID indicates an expected call of NewUserID.
func (mr *MockUserIDFactoryMockRecorder) NewUserID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUserID", reflect.TypeOf((*MockUserIDFactory)(nil).NewUserID))
}

// MockRoomIDFactory is a mock of RoomIDFactory interface.
type MockRoomIDFactory struct {
	ctrl     *gomock.Controller
	recorder *MockRoomIDFactoryMockRecorder
	isgomock struct{}
}

// MockRoomIDFactoryMockRecorder is the mock recorder for MockRoomIDFactory.
type MockRoomIDFactoryMockRecorder struct {
	mock *MockRoomIDFactory
}

// NewMockRoomIDFactory creates a new mock instance.
func NewMockRoomIDFactory(ctrl *gomock.Controller) *MockRoomIDFactory {
	mock := &MockRoomIDFactory{ctrl: ctrl}
	mock.recorder = &MockRoomIDFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomIDFactory) EXPECT() *MockRoomIDFactoryMockRecorder {
	return m.recorder
}

// NewRoomID mocks base method.
func (m *MockRoomIDFactory) NewRoomID() (entity.RoomID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRoomID")
	ret0, _ := ret[0].(entity.RoomID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRoomID indicates an expected call of NewRoomID.
func (mr *MockRoomIDFactoryMockRecorder) NewRoomID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRoomID", reflect.TypeOf((*MockRoomIDFactory)(nil).NewRoomID))
}

// MockMessageIDFactory is a mock of MessageIDFactory interface.
type MockMessageIDFactory struct {
	ctrl     *gomock.Controller
	recorder *MockMessageIDFactoryMockRecorder
	isgomock struct{}
}

// MockMessageIDFactoryMockRecorder is the mock recorder for MockMessageIDFactory.
type MockMessageIDFactoryMockRecorder struct {
	mock *MockMessageIDFactory
}

// NewMockMessageIDFactory creates a new mock instance.
func NewMockMessageIDFactory(ctrl *gomock.Controller) *MockMessageIDFactory {
	mock := &MockMessageIDFactory{ctrl: ctrl}
	mock.recorder = &MockMessageIDFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageIDFactory) EXPECT() *MockMessageIDFactoryMockRecorder {
	return m.recorder
}

// NewMessageID mocks base method.
func (m *MockMessageIDFactory) NewMessageID() (entity.MessageID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMessageID")
	ret0, _ := ret[0].(entity.MessageID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewMessageID indicates an expected call of NewMessageID.
func (mr *MockMessageIDFactoryMockRecorder) NewMessageID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMessageID", reflect.TypeOf((*MockMessageIDFactory)(nil).NewMessageID))
}

// MockWsClientIDFactory is a mock of WsClientIDFactory interface.
type MockWsClientIDFactory struct {
	ctrl     *gomock.Controller
	recorder *MockWsClientIDFactoryMockRecorder
	isgomock struct{}
}

// MockWsClientIDFactoryMockRecorder is the mock recorder for MockWsClientIDFactory.
type MockWsClientIDFactoryMockRecorder struct {
	mock *MockWsClientIDFactory
}

// NewMockWsClientIDFactory creates a new mock instance.
func NewMockWsClientIDFactory(ctrl *gomock.Controller) *MockWsClientIDFactory {
	mock := &MockWsClientIDFactory{ctrl: ctrl}
	mock.recorder = &MockWsClientIDFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWsClientIDFactory) EXPECT() *MockWsClientIDFactoryMockRecorder {
	return m.recorder
}

// NewWsClientID mocks base method.
func (m *MockWsClientIDFactory) NewWsClientID() (entity.WsClientID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWsClientID")
	ret0, _ := ret[0].(entity.WsClientID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewWsClientID indicates an expected call of NewWsClientID.
func (mr *MockWsClientIDFactoryMockRecorder) NewWsClientID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWsClientID", reflect.TypeOf((*MockWsClientIDFactory)(nil).NewWsClientID))
}
