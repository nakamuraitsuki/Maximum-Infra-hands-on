// Code generated by MockGen. DO NOT EDIT.
// Source: /home/nakamuraitsuki/program/Maximum/Infra/Maximum-Infra-hands-on/backend/internal/interface/adapter/hasher_adapter.go
//
// Generated by this command:
//
//	mockgen --source=/home/nakamuraitsuki/program/Maximum/Infra/Maximum-Infra-hands-on/backend/internal/interface/adapter/hasher_adapter.go --destination=./mocks/interface/adapter/hasher_adapter_mock.go --package=adapter_mocks
//

// Package adapter_mocks is a generated GoMock package.
package mock_adapter

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHasherAdapter is a mock of HasherAdapter interface.
type MockHasherAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockHasherAdapterMockRecorder
	isgomock struct{}
}

// MockHasherAdapterMockRecorder is the mock recorder for MockHasherAdapter.
type MockHasherAdapterMockRecorder struct {
	mock *MockHasherAdapter
}

// NewMockHasherAdapter creates a new mock instance.
func NewMockHasherAdapter(ctrl *gomock.Controller) *MockHasherAdapter {
	mock := &MockHasherAdapter{ctrl: ctrl}
	mock.recorder = &MockHasherAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHasherAdapter) EXPECT() *MockHasherAdapterMockRecorder {
	return m.recorder
}

// ComparePassword mocks base method.
func (m *MockHasherAdapter) ComparePassword(hashedPassword, password string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePassword", hashedPassword, password)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComparePassword indicates an expected call of ComparePassword.
func (mr *MockHasherAdapterMockRecorder) ComparePassword(hashedPassword, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePassword", reflect.TypeOf((*MockHasherAdapter)(nil).ComparePassword), hashedPassword, password)
}

// HashPassword mocks base method.
func (m *MockHasherAdapter) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockHasherAdapterMockRecorder) HashPassword(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockHasherAdapter)(nil).HashPassword), password)
}
