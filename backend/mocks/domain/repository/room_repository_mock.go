// Code generated by MockGen. DO NOT EDIT.
// Source: /home/nakamuraitsuki/program/Maximum/Infra/Maximum-Infra-hands-on/backend/internal/domain/repository/room_repository.go
//
// Generated by this command:
//
//	mockgen --source=/home/nakamuraitsuki/program/Maximum/Infra/Maximum-Infra-hands-on/backend/internal/domain/repository/room_repository.go --destination=./mocks/domain/repository/room_repository_mock.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	entity "example.com/webrtc-practice/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockRoomRepository is a mock of RoomRepository interface.
type MockRoomRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoomRepositoryMockRecorder
	isgomock struct{}
}

// MockRoomRepositoryMockRecorder is the mock recorder for MockRoomRepository.
type MockRoomRepositoryMockRecorder struct {
	mock *MockRoomRepository
}

// NewMockRoomRepository creates a new mock instance.
func NewMockRoomRepository(ctrl *gomock.Controller) *MockRoomRepository {
	mock := &MockRoomRepository{ctrl: ctrl}
	mock.recorder = &MockRoomRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomRepository) EXPECT() *MockRoomRepositoryMockRecorder {
	return m.recorder
}

// AddMemberToRoom mocks base method.
func (m *MockRoomRepository) AddMemberToRoom(arg0 entity.RoomID, arg1 entity.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMemberToRoom", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMemberToRoom indicates an expected call of AddMemberToRoom.
func (mr *MockRoomRepositoryMockRecorder) AddMemberToRoom(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMemberToRoom", reflect.TypeOf((*MockRoomRepository)(nil).AddMemberToRoom), arg0, arg1)
}

// DeleteRoom mocks base method.
func (m *MockRoomRepository) DeleteRoom(arg0 entity.RoomID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoom", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoom indicates an expected call of DeleteRoom.
func (mr *MockRoomRepositoryMockRecorder) DeleteRoom(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoom", reflect.TypeOf((*MockRoomRepository)(nil).DeleteRoom), arg0)
}

// GetAllRooms mocks base method.
func (m *MockRoomRepository) GetAllRooms() ([]*entity.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRooms")
	ret0, _ := ret[0].([]*entity.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRooms indicates an expected call of GetAllRooms.
func (mr *MockRoomRepositoryMockRecorder) GetAllRooms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRooms", reflect.TypeOf((*MockRoomRepository)(nil).GetAllRooms))
}

// GetPublicIDByRoomID mocks base method.
func (m *MockRoomRepository) GetPublicIDByRoomID(id entity.RoomID) (entity.RoomPublicID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicIDByRoomID", id)
	ret0, _ := ret[0].(entity.RoomPublicID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicIDByRoomID indicates an expected call of GetPublicIDByRoomID.
func (mr *MockRoomRepositoryMockRecorder) GetPublicIDByRoomID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicIDByRoomID", reflect.TypeOf((*MockRoomRepository)(nil).GetPublicIDByRoomID), id)
}

// GetRoomByID mocks base method.
func (m *MockRoomRepository) GetRoomByID(id entity.RoomID) (*entity.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomByID", id)
	ret0, _ := ret[0].(*entity.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomByID indicates an expected call of GetRoomByID.
func (mr *MockRoomRepositoryMockRecorder) GetRoomByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomByID", reflect.TypeOf((*MockRoomRepository)(nil).GetRoomByID), id)
}

// GetRoomByNameLike mocks base method.
func (m *MockRoomRepository) GetRoomByNameLike(name string) ([]*entity.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomByNameLike", name)
	ret0, _ := ret[0].([]*entity.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomByNameLike indicates an expected call of GetRoomByNameLike.
func (mr *MockRoomRepositoryMockRecorder) GetRoomByNameLike(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomByNameLike", reflect.TypeOf((*MockRoomRepository)(nil).GetRoomByNameLike), name)
}

// GetRoomIDByPublicID mocks base method.
func (m *MockRoomRepository) GetRoomIDByPublicID(id entity.RoomPublicID) (entity.RoomID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomIDByPublicID", id)
	ret0, _ := ret[0].(entity.RoomID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomIDByPublicID indicates an expected call of GetRoomIDByPublicID.
func (mr *MockRoomRepositoryMockRecorder) GetRoomIDByPublicID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomIDByPublicID", reflect.TypeOf((*MockRoomRepository)(nil).GetRoomIDByPublicID), id)
}

// GetUsersInRoom mocks base method.
func (m *MockRoomRepository) GetUsersInRoom(arg0 entity.RoomID) ([]*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersInRoom", arg0)
	ret0, _ := ret[0].([]*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersInRoom indicates an expected call of GetUsersInRoom.
func (mr *MockRoomRepositoryMockRecorder) GetUsersInRoom(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersInRoom", reflect.TypeOf((*MockRoomRepository)(nil).GetUsersInRoom), arg0)
}

// RemoveMemberFromRoom mocks base method.
func (m *MockRoomRepository) RemoveMemberFromRoom(arg0 entity.RoomID, arg1 entity.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMemberFromRoom", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMemberFromRoom indicates an expected call of RemoveMemberFromRoom.
func (mr *MockRoomRepositoryMockRecorder) RemoveMemberFromRoom(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMemberFromRoom", reflect.TypeOf((*MockRoomRepository)(nil).RemoveMemberFromRoom), arg0, arg1)
}

// SaveRoom mocks base method.
func (m *MockRoomRepository) SaveRoom(arg0 *entity.Room) (entity.RoomID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRoom", arg0)
	ret0, _ := ret[0].(entity.RoomID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveRoom indicates an expected call of SaveRoom.
func (mr *MockRoomRepositoryMockRecorder) SaveRoom(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRoom", reflect.TypeOf((*MockRoomRepository)(nil).SaveRoom), arg0)
}

// UpdateRoomName mocks base method.
func (m *MockRoomRepository) UpdateRoomName(arg0 entity.RoomID, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoomName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoomName indicates an expected call of UpdateRoomName.
func (mr *MockRoomRepositoryMockRecorder) UpdateRoomName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoomName", reflect.TypeOf((*MockRoomRepository)(nil).UpdateRoomName), arg0, arg1)
}
