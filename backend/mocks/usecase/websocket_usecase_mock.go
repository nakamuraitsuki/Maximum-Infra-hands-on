// Code generated by MockGen. DO NOT EDIT.
// Source: /home/nakamuraitsuki/program/Maximum/Infra/Maximum-Infra-hands-on/backend/internal/usecase/websocket_usecase.go
//
// Generated by this command:
//
//	mockgen -source=/home/nakamuraitsuki/program/Maximum/Infra/Maximum-Infra-hands-on/backend/internal/usecase/websocket_usecase.go -destination=mocks/usecase/websocket_usecase_mock.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	usecase "example.com/webrtc-practice/internal/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockWebsocketUseCaseInterface is a mock of WebsocketUseCaseInterface interface.
type MockWebsocketUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWebsocketUseCaseInterfaceMockRecorder
	isgomock struct{}
}

// MockWebsocketUseCaseInterfaceMockRecorder is the mock recorder for MockWebsocketUseCaseInterface.
type MockWebsocketUseCaseInterfaceMockRecorder struct {
	mock *MockWebsocketUseCaseInterface
}

// NewMockWebsocketUseCaseInterface creates a new mock instance.
func NewMockWebsocketUseCaseInterface(ctrl *gomock.Controller) *MockWebsocketUseCaseInterface {
	mock := &MockWebsocketUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockWebsocketUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebsocketUseCaseInterface) EXPECT() *MockWebsocketUseCaseInterfaceMockRecorder {
	return m.recorder
}

// ConnectUserToRoom mocks base method.
func (m *MockWebsocketUseCaseInterface) ConnectUserToRoom(req usecase.ConnectUserToRoomRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectUserToRoom", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectUserToRoom indicates an expected call of ConnectUserToRoom.
func (mr *MockWebsocketUseCaseInterfaceMockRecorder) ConnectUserToRoom(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectUserToRoom", reflect.TypeOf((*MockWebsocketUseCaseInterface)(nil).ConnectUserToRoom), req)
}

// DisconnectUser mocks base method.
func (m *MockWebsocketUseCaseInterface) DisconnectUser(req usecase.DisconnectUserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectUser", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisconnectUser indicates an expected call of DisconnectUser.
func (mr *MockWebsocketUseCaseInterfaceMockRecorder) DisconnectUser(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectUser", reflect.TypeOf((*MockWebsocketUseCaseInterface)(nil).DisconnectUser), req)
}

// GetMessageHistory mocks base method.
func (m *MockWebsocketUseCaseInterface) GetMessageHistory(req usecase.GetMessageHistoryRequest) (usecase.GetMessageHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageHistory", req)
	ret0, _ := ret[0].(usecase.GetMessageHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageHistory indicates an expected call of GetMessageHistory.
func (mr *MockWebsocketUseCaseInterfaceMockRecorder) GetMessageHistory(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageHistory", reflect.TypeOf((*MockWebsocketUseCaseInterface)(nil).GetMessageHistory), req)
}

// SendMessage mocks base method.
func (m *MockWebsocketUseCaseInterface) SendMessage(req usecase.SendMessageRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockWebsocketUseCaseInterfaceMockRecorder) SendMessage(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockWebsocketUseCaseInterface)(nil).SendMessage), req)
}
