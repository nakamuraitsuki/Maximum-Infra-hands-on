// Code generated by MockGen. DO NOT EDIT.
// Source: /home/nakamuraitsuki/program/Maximum/Infra/Maximum-Infra-hands-on/backend/internal/domain/service/messageCacheService.go
//
// Generated by this command:
//
//	mockgen -source=/home/nakamuraitsuki/program/Maximum/Infra/Maximum-Infra-hands-on/backend/internal/domain/service/messageCacheService.go -destination=test/mocks/domain/service/messageCacheService_mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	entity "example.com/infrahandson/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageCacheService is a mock of MessageCacheService interface.
type MockMessageCacheService struct {
	ctrl     *gomock.Controller
	recorder *MockMessageCacheServiceMockRecorder
	isgomock struct{}
}

// MockMessageCacheServiceMockRecorder is the mock recorder for MockMessageCacheService.
type MockMessageCacheServiceMockRecorder struct {
	mock *MockMessageCacheService
}

// NewMockMessageCacheService creates a new mock instance.
func NewMockMessageCacheService(ctrl *gomock.Controller) *MockMessageCacheService {
	mock := &MockMessageCacheService{ctrl: ctrl}
	mock.recorder = &MockMessageCacheServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageCacheService) EXPECT() *MockMessageCacheServiceMockRecorder {
	return m.recorder
}

// AddMessage mocks base method.
func (m *MockMessageCacheService) AddMessage(roomID entity.RoomID, message *entity.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessage", roomID, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMessage indicates an expected call of AddMessage.
func (mr *MockMessageCacheServiceMockRecorder) AddMessage(roomID, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessage", reflect.TypeOf((*MockMessageCacheService)(nil).AddMessage), roomID, message)
}

// GetRecentMessages mocks base method.
func (m *MockMessageCacheService) GetRecentMessages(roomID entity.RoomID) ([]*entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentMessages", roomID)
	ret0, _ := ret[0].([]*entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentMessages indicates an expected call of GetRecentMessages.
func (mr *MockMessageCacheServiceMockRecorder) GetRecentMessages(roomID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentMessages", reflect.TypeOf((*MockMessageCacheService)(nil).GetRecentMessages), roomID)
}
