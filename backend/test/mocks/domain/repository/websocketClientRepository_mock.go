// Code generated by MockGen. DO NOT EDIT.
// Source: /home/nakamura/program/Maximum/infra/Maximum-Infra-hands-on/backend/internal/domain/repository/websocketClientRepository.go
//
// Generated by this command:
//
//	mockgen -source=/home/nakamura/program/Maximum/infra/Maximum-Infra-hands-on/backend/internal/domain/repository/websocketClientRepository.go -destination=test/mocks/domain/repository/websocketClientRepository_mock.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "example.com/infrahandson/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockWebsocketClientRepository is a mock of WebsocketClientRepository interface.
type MockWebsocketClientRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWebsocketClientRepositoryMockRecorder
	isgomock struct{}
}

// MockWebsocketClientRepositoryMockRecorder is the mock recorder for MockWebsocketClientRepository.
type MockWebsocketClientRepositoryMockRecorder struct {
	mock *MockWebsocketClientRepository
}

// NewMockWebsocketClientRepository creates a new mock instance.
func NewMockWebsocketClientRepository(ctrl *gomock.Controller) *MockWebsocketClientRepository {
	mock := &MockWebsocketClientRepository{ctrl: ctrl}
	mock.recorder = &MockWebsocketClientRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebsocketClientRepository) EXPECT() *MockWebsocketClientRepositoryMockRecorder {
	return m.recorder
}

// CreateClient mocks base method.
func (m *MockWebsocketClientRepository) CreateClient(ctx context.Context, client *entity.WebsocketClient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", ctx, client)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockWebsocketClientRepositoryMockRecorder) CreateClient(ctx, client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockWebsocketClientRepository)(nil).CreateClient), ctx, client)
}

// DeleteClient mocks base method.
func (m *MockWebsocketClientRepository) DeleteClient(ctx context.Context, id entity.WsClientID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClient", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClient indicates an expected call of DeleteClient.
func (mr *MockWebsocketClientRepositoryMockRecorder) DeleteClient(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClient", reflect.TypeOf((*MockWebsocketClientRepository)(nil).DeleteClient), ctx, id)
}

// GetClientByID mocks base method.
func (m *MockWebsocketClientRepository) GetClientByID(ctx context.Context, id entity.WsClientID) (*entity.WebsocketClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientByID", ctx, id)
	ret0, _ := ret[0].(*entity.WebsocketClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientByID indicates an expected call of GetClientByID.
func (mr *MockWebsocketClientRepositoryMockRecorder) GetClientByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientByID", reflect.TypeOf((*MockWebsocketClientRepository)(nil).GetClientByID), ctx, id)
}

// GetClientsByRoomID mocks base method.
func (m *MockWebsocketClientRepository) GetClientsByRoomID(ctx context.Context, roomID entity.RoomID) ([]*entity.WebsocketClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientsByRoomID", ctx, roomID)
	ret0, _ := ret[0].([]*entity.WebsocketClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientsByRoomID indicates an expected call of GetClientsByRoomID.
func (mr *MockWebsocketClientRepositoryMockRecorder) GetClientsByRoomID(ctx, roomID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientsByRoomID", reflect.TypeOf((*MockWebsocketClientRepository)(nil).GetClientsByRoomID), ctx, roomID)
}

// GetClientsByUserID mocks base method.
func (m *MockWebsocketClientRepository) GetClientsByUserID(ctx context.Context, userID entity.UserID) (*entity.WebsocketClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientsByUserID", ctx, userID)
	ret0, _ := ret[0].(*entity.WebsocketClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientsByUserID indicates an expected call of GetClientsByUserID.
func (mr *MockWebsocketClientRepositoryMockRecorder) GetClientsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientsByUserID", reflect.TypeOf((*MockWebsocketClientRepository)(nil).GetClientsByUserID), ctx, userID)
}
