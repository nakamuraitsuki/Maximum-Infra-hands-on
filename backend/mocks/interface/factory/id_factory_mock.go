// Code generated by MockGen. DO NOT EDIT.
// Source: /home/nakamura/program/Maximum/infra/Maximum-Infra-hands-on/backend/internal/interface/factory/id_factory.go
//
// Generated by this command:
//
//	mockgen -source=/home/nakamura/program/Maximum/infra/Maximum-Infra-hands-on/backend/internal/interface/factory/id_factory.go -destination=mocks/interface/factory/id_factory_mock.go
//

// Package mock_factory is a generated GoMock package.
package mock_factory

import (
	reflect "reflect"

	entity "example.com/webrtc-practice/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUserIDFactory is a mock of UserIDFactory interface.
type MockUserIDFactory struct {
	ctrl     *gomock.Controller
	recorder *MockUserIDFactoryMockRecorder
	isgomock struct{}
}

// MockUserIDFactoryMockRecorder is the mock recorder for MockUserIDFactory.
type MockUserIDFactoryMockRecorder struct {
	mock *MockUserIDFactory
}

// NewMockUserIDFactory creates a new mock instance.
func NewMockUserIDFactory(ctrl *gomock.Controller) *MockUserIDFactory {
	mock := &MockUserIDFactory{ctrl: ctrl}
	mock.recorder = &MockUserIDFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserIDFactory) EXPECT() *MockUserIDFactoryMockRecorder {
	return m.recorder
}

// FromInt mocks base method.
func (m *MockUserIDFactory) FromInt(arg0 int) entity.UserID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromInt", arg0)
	ret0, _ := ret[0].(entity.UserID)
	return ret0
}

// FromInt indicates an expected call of FromInt.
func (mr *MockUserIDFactoryMockRecorder) FromInt(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromInt", reflect.TypeOf((*MockUserIDFactory)(nil).FromInt), arg0)
}

// FromString mocks base method.
func (m *MockUserIDFactory) FromString(arg0 string) entity.UserPublicID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromString", arg0)
	ret0, _ := ret[0].(entity.UserPublicID)
	return ret0
}

// FromString indicates an expected call of FromString.
func (mr *MockUserIDFactoryMockRecorder) FromString(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromString", reflect.TypeOf((*MockUserIDFactory)(nil).FromString), arg0)
}

// NewUserPublicID mocks base method.
func (m *MockUserIDFactory) NewUserPublicID() (entity.UserPublicID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUserPublicID")
	ret0, _ := ret[0].(entity.UserPublicID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewUserPublicID indicates an expected call of NewUserPublicID.
func (mr *MockUserIDFactoryMockRecorder) NewUserPublicID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUserPublicID", reflect.TypeOf((*MockUserIDFactory)(nil).NewUserPublicID))
}

// MockRoomIDFactory is a mock of RoomIDFactory interface.
type MockRoomIDFactory struct {
	ctrl     *gomock.Controller
	recorder *MockRoomIDFactoryMockRecorder
	isgomock struct{}
}

// MockRoomIDFactoryMockRecorder is the mock recorder for MockRoomIDFactory.
type MockRoomIDFactoryMockRecorder struct {
	mock *MockRoomIDFactory
}

// NewMockRoomIDFactory creates a new mock instance.
func NewMockRoomIDFactory(ctrl *gomock.Controller) *MockRoomIDFactory {
	mock := &MockRoomIDFactory{ctrl: ctrl}
	mock.recorder = &MockRoomIDFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomIDFactory) EXPECT() *MockRoomIDFactoryMockRecorder {
	return m.recorder
}

// FromInt mocks base method.
func (m *MockRoomIDFactory) FromInt(arg0 int) entity.RoomID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromInt", arg0)
	ret0, _ := ret[0].(entity.RoomID)
	return ret0
}

// FromInt indicates an expected call of FromInt.
func (mr *MockRoomIDFactoryMockRecorder) FromInt(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromInt", reflect.TypeOf((*MockRoomIDFactory)(nil).FromInt), arg0)
}

// FromString mocks base method.
func (m *MockRoomIDFactory) FromString(arg0 string) entity.RoomPublicID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromString", arg0)
	ret0, _ := ret[0].(entity.RoomPublicID)
	return ret0
}

// FromString indicates an expected call of FromString.
func (mr *MockRoomIDFactoryMockRecorder) FromString(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromString", reflect.TypeOf((*MockRoomIDFactory)(nil).FromString), arg0)
}

// NewRoomPublicID mocks base method.
func (m *MockRoomIDFactory) NewRoomPublicID() (entity.RoomPublicID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRoomPublicID")
	ret0, _ := ret[0].(entity.RoomPublicID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRoomPublicID indicates an expected call of NewRoomPublicID.
func (mr *MockRoomIDFactoryMockRecorder) NewRoomPublicID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRoomPublicID", reflect.TypeOf((*MockRoomIDFactory)(nil).NewRoomPublicID))
}

// MockMessageIDFactory is a mock of MessageIDFactory interface.
type MockMessageIDFactory struct {
	ctrl     *gomock.Controller
	recorder *MockMessageIDFactoryMockRecorder
	isgomock struct{}
}

// MockMessageIDFactoryMockRecorder is the mock recorder for MockMessageIDFactory.
type MockMessageIDFactoryMockRecorder struct {
	mock *MockMessageIDFactory
}

// NewMockMessageIDFactory creates a new mock instance.
func NewMockMessageIDFactory(ctrl *gomock.Controller) *MockMessageIDFactory {
	mock := &MockMessageIDFactory{ctrl: ctrl}
	mock.recorder = &MockMessageIDFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageIDFactory) EXPECT() *MockMessageIDFactoryMockRecorder {
	return m.recorder
}

// FromInt mocks base method.
func (m *MockMessageIDFactory) FromInt(arg0 int) entity.MessageID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromInt", arg0)
	ret0, _ := ret[0].(entity.MessageID)
	return ret0
}

// FromInt indicates an expected call of FromInt.
func (mr *MockMessageIDFactoryMockRecorder) FromInt(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromInt", reflect.TypeOf((*MockMessageIDFactory)(nil).FromInt), arg0)
}

// FromString mocks base method.
func (m *MockMessageIDFactory) FromString(arg0 string) entity.MessagePublicID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromString", arg0)
	ret0, _ := ret[0].(entity.MessagePublicID)
	return ret0
}

// FromString indicates an expected call of FromString.
func (mr *MockMessageIDFactoryMockRecorder) FromString(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromString", reflect.TypeOf((*MockMessageIDFactory)(nil).FromString), arg0)
}

// NewMessagePublicID mocks base method.
func (m *MockMessageIDFactory) NewMessagePublicID() (entity.MessagePublicID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMessagePublicID")
	ret0, _ := ret[0].(entity.MessagePublicID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewMessagePublicID indicates an expected call of NewMessagePublicID.
func (mr *MockMessageIDFactoryMockRecorder) NewMessagePublicID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMessagePublicID", reflect.TypeOf((*MockMessageIDFactory)(nil).NewMessagePublicID))
}

// MockWsClientIDFactory is a mock of WsClientIDFactory interface.
type MockWsClientIDFactory struct {
	ctrl     *gomock.Controller
	recorder *MockWsClientIDFactoryMockRecorder
	isgomock struct{}
}

// MockWsClientIDFactoryMockRecorder is the mock recorder for MockWsClientIDFactory.
type MockWsClientIDFactoryMockRecorder struct {
	mock *MockWsClientIDFactory
}

// NewMockWsClientIDFactory creates a new mock instance.
func NewMockWsClientIDFactory(ctrl *gomock.Controller) *MockWsClientIDFactory {
	mock := &MockWsClientIDFactory{ctrl: ctrl}
	mock.recorder = &MockWsClientIDFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWsClientIDFactory) EXPECT() *MockWsClientIDFactoryMockRecorder {
	return m.recorder
}

// FromInt mocks base method.
func (m *MockWsClientIDFactory) FromInt(arg0 int) entity.WsClientID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromInt", arg0)
	ret0, _ := ret[0].(entity.WsClientID)
	return ret0
}

// FromInt indicates an expected call of FromInt.
func (mr *MockWsClientIDFactoryMockRecorder) FromInt(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromInt", reflect.TypeOf((*MockWsClientIDFactory)(nil).FromInt), arg0)
}

// FromString mocks base method.
func (m *MockWsClientIDFactory) FromString(arg0 string) entity.WsClientPublicID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromString", arg0)
	ret0, _ := ret[0].(entity.WsClientPublicID)
	return ret0
}

// FromString indicates an expected call of FromString.
func (mr *MockWsClientIDFactoryMockRecorder) FromString(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromString", reflect.TypeOf((*MockWsClientIDFactory)(nil).FromString), arg0)
}

// NewWsClientPublicID mocks base method.
func (m *MockWsClientIDFactory) NewWsClientPublicID() (entity.WsClientPublicID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWsClientPublicID")
	ret0, _ := ret[0].(entity.WsClientPublicID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewWsClientPublicID indicates an expected call of NewWsClientPublicID.
func (mr *MockWsClientIDFactoryMockRecorder) NewWsClientPublicID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWsClientPublicID", reflect.TypeOf((*MockWsClientIDFactory)(nil).NewWsClientPublicID))
}
