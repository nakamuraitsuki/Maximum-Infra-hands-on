// Code generated by MockGen. DO NOT EDIT.
// Source: /home/nakamuraitsuki/program/Maximum/Infra/Maximum-Infra-hands-on/backend/internal/interface/adapter/websocket_upgrader_adapter.go
//
// Generated by this command:
//
//	mockgen -source=/home/nakamuraitsuki/program/Maximum/Infra/Maximum-Infra-hands-on/backend/internal/interface/adapter/websocket_upgrader_adapter.go -destination=mocks/interface/adapter/websocket_upgrader_adapter_mock.go
//

// Package mock_adapter is a generated GoMock package.
package mock_adapter

import (
	http "net/http"
	reflect "reflect"

	adapter "example.com/webrtc-practice/internal/interface/adapter"
	gomock "go.uber.org/mock/gomock"
)

// MockWebSocketUpgraderAdapter is a mock of WebSocketUpgraderAdapter interface.
type MockWebSocketUpgraderAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockWebSocketUpgraderAdapterMockRecorder
	isgomock struct{}
}

// MockWebSocketUpgraderAdapterMockRecorder is the mock recorder for MockWebSocketUpgraderAdapter.
type MockWebSocketUpgraderAdapterMockRecorder struct {
	mock *MockWebSocketUpgraderAdapter
}

// NewMockWebSocketUpgraderAdapter creates a new mock instance.
func NewMockWebSocketUpgraderAdapter(ctrl *gomock.Controller) *MockWebSocketUpgraderAdapter {
	mock := &MockWebSocketUpgraderAdapter{ctrl: ctrl}
	mock.recorder = &MockWebSocketUpgraderAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebSocketUpgraderAdapter) EXPECT() *MockWebSocketUpgraderAdapterMockRecorder {
	return m.recorder
}

// Upgrade mocks base method.
func (m *MockWebSocketUpgraderAdapter) Upgrade(w http.ResponseWriter, r *http.Request) (adapter.ConnAdapter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upgrade", w, r)
	ret0, _ := ret[0].(adapter.ConnAdapter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upgrade indicates an expected call of Upgrade.
func (mr *MockWebSocketUpgraderAdapterMockRecorder) Upgrade(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upgrade", reflect.TypeOf((*MockWebSocketUpgraderAdapter)(nil).Upgrade), w, r)
}
