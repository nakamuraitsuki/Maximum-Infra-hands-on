// Code generated by MockGen. DO NOT EDIT.
// Source: /home/nakamuraitsuki/program/Maximum/Infra/Maximum-Infra-hands-on/backend/internal/domain/repository/messageRepository.go
//
// Generated by this command:
//
//	mockgen -source=/home/nakamuraitsuki/program/Maximum/Infra/Maximum-Infra-hands-on/backend/internal/domain/repository/messageRepository.go -destination=test/mocks/domain/repository/messageRepository_mock.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	time "time"

	entity "example.com/infrahandson/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageRepository is a mock of MessageRepository interface.
type MockMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepositoryMockRecorder
	isgomock struct{}
}

// MockMessageRepositoryMockRecorder is the mock recorder for MockMessageRepository.
type MockMessageRepositoryMockRecorder struct {
	mock *MockMessageRepository
}

// NewMockMessageRepository creates a new mock instance.
func NewMockMessageRepository(ctrl *gomock.Controller) *MockMessageRepository {
	mock := &MockMessageRepository{ctrl: ctrl}
	mock.recorder = &MockMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepository) EXPECT() *MockMessageRepositoryMockRecorder {
	return m.recorder
}

// CreateMessage mocks base method.
func (m *MockMessageRepository) CreateMessage(arg0 *entity.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockMessageRepositoryMockRecorder) CreateMessage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockMessageRepository)(nil).CreateMessage), arg0)
}

// GetMessageHistoryInRoom mocks base method.
func (m *MockMessageRepository) GetMessageHistoryInRoom(roomID entity.RoomID, limit int, beforeSentAt time.Time) ([]*entity.Message, time.Time, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageHistoryInRoom", roomID, limit, beforeSentAt)
	ret0, _ := ret[0].([]*entity.Message)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetMessageHistoryInRoom indicates an expected call of GetMessageHistoryInRoom.
func (mr *MockMessageRepositoryMockRecorder) GetMessageHistoryInRoom(roomID, limit, beforeSentAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageHistoryInRoom", reflect.TypeOf((*MockMessageRepository)(nil).GetMessageHistoryInRoom), roomID, limit, beforeSentAt)
}

// GetMessagesByRoomID mocks base method.
func (m *MockMessageRepository) GetMessagesByRoomID(roomID entity.RoomID) ([]*entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesByRoomID", roomID)
	ret0, _ := ret[0].([]*entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesByRoomID indicates an expected call of GetMessagesByRoomID.
func (mr *MockMessageRepositoryMockRecorder) GetMessagesByRoomID(roomID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesByRoomID", reflect.TypeOf((*MockMessageRepository)(nil).GetMessagesByRoomID), roomID)
}
