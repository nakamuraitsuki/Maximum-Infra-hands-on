// Code generated by MockGen. DO NOT EDIT.
// Source: /home/nakamuraitsuki/program/Maximum/Infra/Maximum-Infra-hands-on/backend/internal/interface/adapter/loggerAdapter.go
//
// Generated by this command:
//
//	mockgen -source=/home/nakamuraitsuki/program/Maximum/Infra/Maximum-Infra-hands-on/backend/internal/interface/adapter/loggerAdapter.go -destination=test/mocks/interface/adapter/loggerAdapter_mock.go
//

// Package mock_adapter is a generated GoMock package.
package mock_adapter

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLoggerAdapter is a mock of LoggerAdapter interface.
type MockLoggerAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerAdapterMockRecorder
	isgomock struct{}
}

// MockLoggerAdapterMockRecorder is the mock recorder for MockLoggerAdapter.
type MockLoggerAdapterMockRecorder struct {
	mock *MockLoggerAdapter
}

// NewMockLoggerAdapter creates a new mock instance.
func NewMockLoggerAdapter(ctrl *gomock.Controller) *MockLoggerAdapter {
	mock := &MockLoggerAdapter{ctrl: ctrl}
	mock.recorder = &MockLoggerAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerAdapter) EXPECT() *MockLoggerAdapterMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockLoggerAdapter) Error(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerAdapterMockRecorder) Error(msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLoggerAdapter)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockLoggerAdapter) Info(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerAdapterMockRecorder) Info(msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLoggerAdapter)(nil).Info), varargs...)
}

// Warn mocks base method.
func (m *MockLoggerAdapter) Warn(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerAdapterMockRecorder) Warn(msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLoggerAdapter)(nil).Warn), varargs...)
}
